"""
The input file for this script is the output generated by
generateIdToFc7Mapping.py
"""

import json, os
import argparse
import h5py as h5
import numpy as np

def getToyDataset(full_dataset):
	full_dataset = full_dataset.items()
	np.random.shuffle(full_dataset)
	toy_dataset = full_dataset[:100]
	return toy_dataset

def getDist(x1, x2):
	return np.linalg.norm(x1 - x2)

def getDistMatrix(descrs):
	dist_matrix = [[] for i in range(len(descrs))]
	for i in range(len(descrs)):
		dist_matrix[i] = [ getDist(descrs[i], descrs[j]) for j in range(len(descrs)) ]
	return np.asarray(dist_matrix)

def getNeighbors(sorted_idxs, img_ids, k=20):
	neighbors = []
	for sorted_idx in sorted_idxs:
		neighbor_list = []
		for i, idx in enumerate(sorted_idx):
			if idx <= k and idx != 0:
				neighbor_list.append(img_ids[i])
		neighbors.append(neighbor_list)
	return neighbors 

# Do we normalize the descriptors and then compute distances?
if __name__=='__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument(
		"-inputFeatures",
		help="h5 data file containing the fc7 descriptors of coco images in VisDial v0.9",
		default="/srv/share/samyak/visdial-pool/data/visdial-v0.9-fc7-features-val.h5"
	)
	args = parser.parse_args()

	fc7 = h5.File(args.inputFeatures, "r")
	fc7 = dict(fc7)
	
	fc7_toy = getToyDataset(fc7)
	img_ids = [img_id for (img_id, _) in fc7_toy]
	descrs = [np.asarray(descr) for (_, descr) in fc7_toy]

	dist_matrix = getDistMatrix(descrs)
	sorted_idxs = dist_matrix.argsort(axis=1)
	neighbors = getNeighbors(sorted_idxs, img_ids, k=20)
	for i, neighbor_list in enumerate(neighbors):
		print img_ids[i]
		for neighbor in neighbor_list:
			print "\t", neighbor